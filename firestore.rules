/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only
 * access their own profile and data (transactions, budgets, goals).
 *
 * Data Structure:
 * - /users/{userId}: User profile information.
 * - /users/{userId}/transactions/{transactionId}: Transaction data for a user.
 * - /users/{userId}/budgets/{budgetId}: Budget data for a user.
 * - /users/{userId}/goals/{goalId}: Financial goal data for a user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user profile.
 * - Users can only read and write their own transactions, budgets and goals.
 * - No listing of users is allowed.
 * - Flexible data validation is used to allow for rapid prototyping. Only authorization-critical
 *   data is validated.
 *
 * Denormalization for Authorization:
 *  The `userId` field is denormalized onto each transaction, budget, and goal
 *  document to allow for simple and performant ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, create, update, delete): Authenticated user can only access their own profile.
     * @deny (get, create, update, delete): Any other user attempting to access this profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Verify identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to determine if the request is made by the owner.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to determine if the request is made by the existing owner.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId)
                   && request.resource.data.email is string
                   && request.resource.data.name is string
                   && request.resource.data.createdAt is string;

      allow update: if isSignedIn() && isExistingOwner(userId)
                   && request.resource.data.id == resource.data.id; // Enforce userId immutability;

      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to transaction documents.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (get, list, create, update, delete): Authenticated user can only access their own transactions.
     * @deny (get, list, create, update, delete): Any other user attempting to access these transactions.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/transactions/{transactionId} {
      // Verify identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to determine if the request is made by the owner.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to determine if the request is made by the existing owner.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId)
                   && request.resource.data.userId == userId;

      allow update: if isSignedIn() && isExistingOwner(userId)
                   && request.resource.data.userId == userId; // Enforce userId immutability;

      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to budget documents.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (get, list, create, update, delete): Authenticated user can only access their own budgets.
     * @deny (get, list, create, update, delete): Any other user attempting to access these budgets.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/budgets/{budgetId} {
      // Verify identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to determine if the request is made by the owner.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to determine if the request is made by the existing owner.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId)
                   && request.resource.data.userId == userId;

      allow update: if isSignedIn() && isExistingOwner(userId)
                   && request.resource.data.userId == userId; // Enforce userId immutability;

      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to financial goal documents.
     * @path /users/{userId}/goals/{goalId}
     * @allow (get, list, create, update, delete): Authenticated user can only access their own financial goals.
     * @deny (get, list, create, update, delete): Any other user attempting to access these financial goals.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/goals/{goalId} {
      // Verify identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to determine if the request is made by the owner.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       // Helper function to determine if the request is made by the existing owner.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId)
                   && request.resource.data.userId == userId;

      allow update: if isSignedIn() && isExistingOwner(userId)
                   && request.resource.data.userId == userId; // Enforce userId immutability;

      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}