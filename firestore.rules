/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for all data.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information. Only the user can read/write their own profile.
 * - /users/{userId}/transactions/{transactionId}: Stores transaction data for each user. Only the user can manage their own transactions.
 * - /users/{userId}/budgets/{budgetId}: Stores budget data for each user. Only the user can manage their own budgets.
 * - /users/{userId}/goals/{goalId}: Stores financial goal data for each user. Only the user can manage their own goals.
 *
 * Key Security Decisions:
 * - Users can only access their own data. No cross-user data access is allowed.
 * - All writes are validated against the authenticated user's ID.
 * - Listing of documents is restricted to the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile if request.auth.uid == 'user_abc'.
     * @allow (get) - User with UID 'user_abc' can read their profile data.
     * @allow (update) - User with UID 'user_abc' can update their profile data.
     * @allow (delete) - User with UID 'user_abc' can delete their profile data.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile for 'user_abc'.
     * @deny (update) - User with UID 'user_xyz' cannot update the profile of 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to transaction documents for a specific user.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) - User with UID 'user_abc' can create a transaction under their profile.
     * @allow (get) - User with UID 'user_abc' can read a transaction under their profile.
     * @allow (update) - User with UID 'user_abc' can update a transaction under their profile.
     * @allow (delete) - User with UID 'user_abc' can delete a transaction under their profile.
     * @deny (create) - User with UID 'user_xyz' cannot create a transaction for 'user_abc'.
     * @deny (update) - User with UID 'user_xyz' cannot update a transaction belonging to 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/transactions/{transactionId} {
        function isOwner(userId) {
            return request.auth.uid == userId;
        }
        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to budget documents for a specific user.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create) - User with UID 'user_abc' can create a budget under their profile.
     * @allow (get) - User with UID 'user_abc' can read a budget under their profile.
     * @allow (update) - User with UID 'user_abc' can update a budget under their profile.
     * @allow (delete) - User with UID 'user_abc' can delete a budget under their profile.
     * @deny (create) - User with UID 'user_xyz' cannot create a budget for 'user_abc'.
     * @deny (update) - User with UID 'user_xyz' cannot update a budget belonging to 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/budgets/{budgetId} {
      function isOwner(userId) {
          return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to financial goal documents for a specific user.
     * @path /users/{userId}/goals/{goalId}
     * @allow (create) - User with UID 'user_abc' can create a goal under their profile.
     * @allow (get) - User with UID 'user_abc' can read a goal under their profile.
     * @allow (update) - User with UID 'user_abc' can update a goal under their profile.
     * @allow (delete) - User with UID 'user_abc' can delete a goal under their profile.
     * @deny (create) - User with UID 'user_xyz' cannot create a goal for 'user_abc'.
     * @deny (update) - User with UID 'user_xyz' cannot update a goal belonging to 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/goals/{goalId} {
      function isOwner(userId) {
          return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}